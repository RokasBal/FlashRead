// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.src;
using server.src.Task2;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(FlashDbContext))]
    partial class FlashDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "task1", "theme", new[] { "any", "history", "technology", "anime", "politics" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "task2", "theme", new[] { "any", "history", "technology", "anime", "fillers" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.Exceptions.DbLogs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("log_message");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("log_time");

                    b.HasKey("Id")
                        .HasName("logs_pkey");

                    b.ToTable("logs", "logs");
                });

            modelBuilder.Entity("server.UserNamespace.DbTask1Contribution", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("integer")
                        .HasColumnName("questions_id");

                    b.Property<DateTime>("TimeContributed")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("contributions_pkey");

                    b.ToTable("contributions", "users");
                });

            modelBuilder.Entity("server.UserNamespace.DbTaskHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int[]>("Answers")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("answers");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("TimePlayed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_played");

                    b.HasKey("Id")
                        .HasName("history_pkey");

                    b.ToTable("user_history", "users");
                });

            modelBuilder.Entity("server.UserNamespace.DbUser", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string[]>("ContributionsIds")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("contributions_ids");

                    b.Property<string[]>("HistoryIds")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("history_ids");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<byte[]>("ProfilePic")
                        .HasColumnType("bytea")
                        .HasColumnName("profile_pic");

                    b.Property<string>("SessionsId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sessions_id");

                    b.Property<string>("SettingsId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("settings_id");

                    b.HasKey("Email")
                        .HasName("users_pkey");

                    b.ToTable("users", "users");
                });

            modelBuilder.Entity("server.UserNamespace.DbUserSessions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string[]>("SessionIds")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("session_ids");

                    b.HasKey("Id")
                        .HasName("user_sessions_pkey");

                    b.ToTable("user_sessions", "users");
                });

            modelBuilder.Entity("server.UserNamespace.DbUserSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Font")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("font");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("theme");

                    b.HasKey("Id")
                        .HasName("settings_pkey");

                    b.ToTable("settings", "users");
                });

            modelBuilder.Entity("server.UserNamespace.DbUserSingleSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("TimeEnded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_ended");

                    b.Property<DateTime>("TimeStarted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_started");

                    b.HasKey("Id")
                        .HasName("single_session_pkey");

                    b.ToTable("single_session", "users");
                });

            modelBuilder.Entity("server.src.Settings.DbSettingsFont", b =>
                {
                    b.Property<string>("Font")
                        .HasColumnType("text")
                        .HasColumnName("font");

                    b.Property<string>("FontFamily")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("font_family");

                    b.HasKey("Font")
                        .HasName("font_pkey");

                    b.ToTable("font", "settings");
                });

            modelBuilder.Entity("server.src.Settings.DbSettingsTheme", b =>
                {
                    b.Property<string>("Theme")
                        .HasColumnType("text")
                        .HasColumnName("theme");

                    b.Property<string>("AccentColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accent_color");

                    b.Property<string>("BorderColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("border_color");

                    b.Property<string>("MainBackground")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("main_background");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("primary_color");

                    b.Property<string>("SecondaryBackground")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secondary_background");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text_color");

                    b.HasKey("Theme")
                        .HasName("theme_pkey");

                    b.ToTable("theme", "settings");
                });

            modelBuilder.Entity("server.src.Task1.DbTask1Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("answer_id");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<int>("TextId")
                        .HasColumnType("integer")
                        .HasColumnName("text_id");

                    b.Property<string[]>("Variants")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("variants");

                    b.HasKey("Id")
                        .HasName("questions_pkey");

                    b.ToTable("questions", "task1");
                });

            modelBuilder.Entity("server.src.Task1.DbTask1Text", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("Theme")
                        .HasColumnType("integer")
                        .HasColumnName("theme");

                    b.HasKey("Id")
                        .HasName("texts_pkey");

                    b.ToTable("texts", "task1");
                });

            modelBuilder.Entity("server.src.Task2.DbTask2Text", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("Text")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("text");

                    b.Property<Task2Data.Theme>("Theme")
                        .HasColumnType("task2.theme")
                        .HasColumnName("theme");

                    b.HasKey("Id")
                        .HasName("texts_pkey");

                    b.ToTable("texts", "task2");
                });
#pragma warning restore 612, 618
        }
    }
}
